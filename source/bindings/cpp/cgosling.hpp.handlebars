#pragma once

// c++
#include <cstring>
#include <memory>
#include <ostream>
#include <stdexcept>

// gosling header
#include <cgosling.h>

// we need to support client and server handshake handles being pointers in
// disguise
static_assert(sizeof(size_t) == sizeof(uintptr_t));

namespace gosling {

// Converts gosling_error_t** C style error handling to exceptions
class throw_on_error {
public:
  ~throw_on_error() noexcept(false) {
    if (error_ != nullptr) {
      std::runtime_error ex(gosling_error_get_message(error_));
      gosling_error_free(error_);
      error_ = nullptr;
      // cppcheck-suppress exceptThrowInDestructor
      throw ex;
    }
  }

  operator gosling_error **() { return &error_; }

private:
  gosling_error *error_ = nullptr;
};

//
// helper class for populating out T** params into unique_ptr<T> objects
//
template <typename T> class out_unique_ptr {
public:
  out_unique_ptr() = delete;
  out_unique_ptr(const out_unique_ptr &) = delete;
  out_unique_ptr &operator=(const out_unique_ptr &) = delete;
  out_unique_ptr &operator=(out_unique_ptr &&) = delete;

  out_unique_ptr(out_unique_ptr &&that) : t_(that.t_), u_(that.u_) {
    that.t_ = nullptr;
    that.u_ = nullptr;
  };
  explicit constexpr out_unique_ptr(std::unique_ptr<T> &u)
      : t_(nullptr), u_(&u) {}

  ~out_unique_ptr() {
    if (u_ != nullptr) {
      u_->reset(t_);
    }
  }

  constexpr operator T **() { return &t_; }

private:
  T *t_ = nullptr;
  std::unique_ptr<T> *u_ = nullptr;
};

//
// helper function for populating out T** params
// example:
//
// void give_int(int** outInt);
// std::unique_ptr<int> pint;
// give_int(tego::out(pint));
// int val = *pint;
//
template <typename T>
constexpr auto out(std::unique_ptr<T> &ptr) -> out_unique_ptr<T> {
  return out_unique_ptr<T>{ptr};
}

//
// std::ostream<< overloads for various gosling objects
//
{{#each functions}}
    {{#if (functionIsToString this)}}

// wrappers for {{this.name}}
inline std::ostream &operator<<(std::ostream &stream, {{functionToObjectParam this}}) {
    char buffer[{{toStringFunctionToSizeConstant this}}];
    ::{{this.name}}(obj, buffer, sizeof(buffer), gosling::throw_on_error());

    return stream.write(buffer, std::strlen(buffer));
}
inline std::string to_string({{functionToObjectParam this}}) {
    char buffer[{{toStringFunctionToSizeConstant this}}];
    ::{{this.name}}(obj, buffer, sizeof(buffer), gosling::throw_on_error());

    return std::string(buffer, std::strlen(buffer));
}
    {{/if}}
{{/each}}
} // namespace gosling

namespace std {

//
// default_delete implementation for uniqeu_ptr of various gosling types
//
{{#each functions}}
    {{#if (functionIsFree this)}}

template<> class default_delete<{{freeFunctionToType this}}> {
public:
    void operator()({{functionToObjectParam this}}) {
        ::{{this.name}}(obj);
    }
};
{{/if}}
{{/each}}
} // namespace std
