searchState.loadedDescShard("tor_interface", 0, "Tor-Interface\nImplementation of an in-process <code>arti-client</code>-based …\nImplementation of an out-of-process <code>arti</code>-based <code>TorProvider</code>\nCensorship circumvention configuration for …\nImplementation of an out-of-process legacy c-tor daemon…\nLegacy c-tor daemon version.\nImplementation of a local, in-process, mock <code>TorProvider</code> …\nProxy settings\nTor-specific cryptographic primitives, operations, and …\nTraits and types for connecting to the Tor Network.\nThe <code>ArtiClientTorClient</code> is an in-process <code>arti-client</code>-based …\n<code>ArtiClientTorClient</code>-specific error type\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>ArtiClientTorClient</code> which uses a Tokio …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ArtiTorClient</code>-specific error type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvided bridge line missing address\nProvided bridge line’s address not parseable\nInvalid bridge address port\nconfiguration only allows aboslute paths to binaries\nConfiguration for a bridge line to be used with a …\nError returned on failure to construct a <code>BridgeLine</code>\nFingerprint is not parseable (must be length 40 base16 …\nProvided bridge line missing fingerprint\nA key/value pair in invalid format\nConfiguration for a pluggable-transport\nError returned on failure to construct a …\nProvided bridge line missing transport\ntransport names must be a valid C identifier\nInvalid transport name (must be a valid C identifier)\nAdd a command-line option used to invoke this …\nGet a reference to this <code>BridgeLine</code>’s address field.\nSerialise this <code>BridgeLine</code> to the value set via …\nGet a reference to this <code>BridgeLine</code>’s fingerprint field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a reference to this <code>BridgeLine</code>’s key/values field.\nConstruct a new <code>PluggableTransportConfig</code>. Each <code>transport</code> …\nConstruct a new <code>BridgeLine</code> from its constiuent parts. The …\nGet a reference to this <code>PluggableTransportConfig</code>’s list …\nGet a reference to this <code>PluggableTransportConfig</code>’s …\nGet a reference to this <code>BridgeLine</code>’s transport field.\nGet a reference to this <code>PluggableTransportConfig</code>’s list …\n<code>LegacyTorClient</code>-specific error type\nA <code>LegacyTorClient</code> implements the <code>TorProvider</code> trait using a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>LegacyTorClient</code> from a …\nGet the version of the connected c-tor daemon.\n<code>LegacyTorVersion</code>-specific error type\nType representing a legacy c-tor daemon’s version …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>LegacyTorVersion</code> object.\n<code>MockTorClient</code>-specific error type\nA mock <code>TorProvider</code> implementation for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>MockTorClient</code>.\nAn error returned when constructing a proxy configuration …\nAn HTTP CONNECT proxy\nConfiguration for an HTTP CONNECT proxy (<code>HTTPSProxy</code> in …\nAn enum representing a possible proxy server configuration …\nError type for the proxy module\nA SOCKS4 proxy\nConfiguration for a SOCKS4 proxy\nA SOCKS5 proxy\nConfiguration for a SOCKS5 proxy\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Socks4ProxyConfig</code>. The <code>address</code> argument …\nConstruct a new <code>Socks5ProxyConfig</code>. The <code>address</code> argument …\nConstruct a new <code>HttpsProxyConfig</code>. The <code>address</code> argument …\nAn error encountered converting between tor_crypto types\nThe number of bytes needed to store base64 encoded ed25519 …\nThe number of bytes needed to store the keyblob header\nThe number of bytes needed to store ed25519 private …\nThe number of bytes needed to store ed25519 private …\nThe number of bytes in an ed25519 secret key …\nThe number of bytes in an ed25519 public key …\nThe number of bytes in an ed25519 signature cbindgen:ignore\nAn ed25519 private key.\nAn ed25519 public key.\nAn ed25519 cryptographic signature\nRepresents various errors that can occur in the tor_crypto …\nAn error encountered converting from a raw byte …\nA error encountered converting a String to a tor_crypto …\nAn enum representing a single bit\nA v3 onion-service id\nThe number of bytes needed to store onion service id as an …\nThe number of bytes needed to store onion service id as an …\nAn x25519 private key\nAn x25519 public key\nThe number of bytes needed to store base64 encoded x25519 …\nThe number of bytes needed to store base64 encoded x25519 …\nThe number of bytes in an x25519 private key …\nThe number of bytes needed to store base32 encoded x25519 …\nThe number of bytes needed to store base32 encoded x25519 …\nThe number of bytes in an x25519 publickey cbindgen:ignore\nView this public key as an array of bytes\nView this public key as an array of bytes\nView this service id as an array of bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>X25519PublicKey</code> from a <code>String</code> in the legacy …\nCreate an <code>X25519PrivateKey</code> from a <code>String</code> in the legacy …\nCreate an <code>Ed25519PrivateKey</code> from a <code>String</code> in the legacy …\nConstruct an <code>Ed25519PublicKey</code> from an <code>Ed25519PrivateKey</code>.\nConstruct an <code>X25519PublicKey</code> from an <code>X25519PrivateKey</code>.\nCreate a <code>V3OnionServiceId</code> from an <code>Ed25519PrivateKey</code>.\nConstruct an <code>Ed25519PrivateKEy</code> from an <code>X25519PrivateKey</code>.\nCreate a <code>V3OnionServiceId</code> from an <code>Ed25519PublicKey</code>.\nAttempt to create an <code>Ed25519PrivateKey</code> from an array of …\nConstruct an <code>Ed25519PublicKey</code> from an array of bytes. Not …\nConstruct an <code>Ed25519Signature</code> from an array of bytes.\nAttempt to create an <code>X25519PrivateKey</code> from an array of …\nConstruct an <code>X25519PublicKey</code> from an array of bytes.\nConstruct an <code>Ed25519PublicKey</code> from a <code>V3OnionServiceId</code>.\nCreate a <code>V3OnionServiceId</code> from a <code>String</code> in the version 3 …\nSecurely generate a new <code>Ed25519PrivateKey</code>.\nSecurely generate a new <code>X25519PrivateKey</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if the provided string is a valid representation …\nSign the provided message and return an <code>Ed25519Signature</code>.\nSign the provided message and return an <code>Ed25519Signature</code> …\nWrite <code>X25519PublicKey</code> to a base32 encocded <code>String</code>.\nWrite <code>X25519PrivateKey</code> to a base64 encocded <code>String</code>.\nConvert this private key to an array of bytes.\nConvert this signature to an array of bytes\nConvert this private key to an array of bytes.\nWrite <code>Ed25519PrivateKey</code> to a c-tor key blob formatted …\nVerify this <code>Ed25519Signature</code> for the given message and …\nVerify this <code>Ed25519Signature</code> for the given message, …\nIndicates successful connection to the Tor Network. The …\nA status update received connecting to the Tor Network.\nA <code>CircuitToken</code> is used to specify circuits used to connect …\nA domain name and port\nA domain name analog to <code>std::net::SocketAddr</code>\nVarious <code>tor_provider</code> errors.\nOther miscellaneous error\nMessages which may be useful for troubleshooting.\nAn onion service address analog to <code>std::net::SocketAddr</code>\nA version 3 onion service address.\nA wrapper around a <code>std::net::TcpListener</code> with some …\nAn onion-service id and virtual port\nAn onion-service has been published to the Tor Network and …\nA wrapper around a <code>std::net::TcpStream</code> with some …\nFailure parsing some string into a type\nAn ip address and port\nAn enum representing the various types of addresses a …\nVarious events possibly returned by a <code>TorProvider</code> …\nThe <code>TorProvider</code> trait allows for high-level Tor Network …\nAccept a new incoming connection from this listener.\nAdd v3 onion-service authorisation credentials, allowing …\nBegin connecting to the Tor Network.\nAnonymously connect to the address specified by <code>target</code> …\nReturns the domain name associated with this domain …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>CircuitToken</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnonymously start an onion-service and return the …\nReturns the onion address of the local connection for an …\nCreate a new <code>OnionAddrV3</code> from a …\nReturns the target address of the remote peer of this …\nReturns the port number associated with this domain …\nReleaes a previously generated <code>CircuitToken</code>.\nRemove a previously added client authorisation credential. …\nReturn the service id associated with this onion address.\nMoves the underlying <code>TcpListener</code> into or out of …\nTries to clone the underlying connection and data. A …\nProcess and return <code>TorEvent</code>s handled by this <code>TorProvider</code>.\nReturn the port numebr associated with this onion address.\nA message\nA number from 0 to 100 for how through the bootstrap …\nThe service-id of the onion-service which has been …\nA longer string with a summary of the current phase of the …\nA short string to identify the current phase of the …")