searchState.loadedDescShard("honk_rpc", 0, "Honk-RPC\nThe <code>ApiSet</code> trait represents a set of APIs that can be …\nFailed to parse bson message\nReceived Bson document header is larger than Session …\nBson documents need to be at least 4 bytes long\nFailure to parse a received BSON document.\nFailed to serialise bson document\nThe default maximum allowed Honk-RPC message (4096 bytes)\nThe default maximum allowed duration between Honk-RPC (60 …\nThe error type for the <code>Session</code> type.\nAn error response, containing the error code.\nRepresents various error codes that can be present in a …\nAttempted to define invalid maximum message size\nFailed to convert bson document to Honk-RPC message\nReceived message document missing required fields.\nToo much time has elapsed without receiving a message\nReceived message document was too big; the default maximum …\nReceived message contained version the receiver cannot …\nA pending response, indicating that the request is still …\nFailed to read data from read stream due to <code>std::io::Error</code>\nA type alias for the cookie used to track client requests.\nProvided request cookie is already in use.\nProvided request function does not exist within the …\nProvided request namespace does not exist.\nProvided request version does not exist.\nRepresents the response to a client request.\nProvided response cookie is not recognized.\nProvided response state is not valid.\nRepresents an application-specific runtime error with a …\nSection in received message contains unknown id.\nSection in received message missing required field, or …\nAttempted to send a Honk-RPC <code>section</code> that is too large to …\nThe object that handles the communication between two …\nA successful response, containing the result of the …\nRepresents an unknown error with a specific error code.\nReceived a Honk-RPC <code>error_section</code> without an associated …\nFailed to flush data to write stream due to <code>std::io::Error</code>\nFailed to write data to write stream due to <code>std::io::Error</code>\nPerforms a client call to a remote function. Returns a …\nDrains all <code>Response</code> objects resulting from prevoius …\nRetrieves the next <code>Response</code> object from previous …\nSchedules the execution of the requested remote procedure …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the required size of a Honk-RPC error section in …\nGets the maximum allowed message size this <code>Session</code> is …\nGets the maximum amount this <code>Session</code> is willing to wait …\nComputes the overhead of the Honk-RPC message type. This …\nComputes the required size of a Honk-RPC requests section …\nComputes the required size of a Honk-RPC response section …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Session</code> and returns the underlying stream.\nReturns the namespace of this <code>ApiSet</code>.\nCreates a new <code>Session</code> using the given <code>stream</code>.\nReturns the result of any in-flight asynchronous requests.\nSets the maximum message size this <code>Session</code> is willing to …\nSets the maximum amount of time this <code>Session</code> is willing to …\nUpdates any internal state required to make forward …\nRead and process Honk-RPC message documents from connected …\nThe cookie associated with the request.\nThe cookie associated with the request.\nThe cookie associated with the request.\nThe error code indicating the type of error that occurred.\nThe result of the request.")