var searchIndex = new Map(JSON.parse('[\
["cgosling_proc_macros",{"doc":"","t":"X","n":["rename_impl"],"q":[[0,"cgosling_proc_macros"]],"d":[""],"i":[0],"f":"`","c":[],"p":[],"b":[]}],\
["gosling",{"doc":"","t":"CCCCCCFGPPPPPPPPISPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOGPPPPNNNNNNNNNNNNNPGPPPNNNNNNNNNNNNNPPPGPSSPPPPPPPPPGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGPPPPNNNNNNNNNNNNNPPGPPPNNNNNNNNNNNNN","n":["context","endpoint_client","endpoint_server","gosling","identity_client","identity_server","Context","ContextEvent","EndpointClientHandshakeCompleted","EndpointClientHandshakeFailed","EndpointServerChannelRequestReceived","EndpointServerHandshakeCompleted","EndpointServerHandshakeFailed","EndpointServerHandshakeRejected","EndpointServerHandshakeStarted","EndpointServerPublished","HandshakeHandle","INVALID_HANDSHAKE_HANDLE","IdentityClientChallengeReceived","IdentityClientHandshakeCompleted","IdentityClientHandshakeFailed","IdentityServerChallengeResponseReceived","IdentityServerEndpointRequestReceived","IdentityServerHandshakeCompleted","IdentityServerHandshakeFailed","IdentityServerHandshakeRejected","IdentityServerHandshakeStarted","IdentityServerPublished","TorBootstrapCompleted","TorBootstrapStatusReceived","TorLogReceived","bootstrap","borrow","borrow","borrow_mut","borrow_mut","endpoint_client_abort_handshake","endpoint_client_begin_handshake","endpoint_server_handle_channel_request_received","endpoint_server_start","endpoint_server_stop","fmt","from","from","identity_client_abort_handshake","identity_client_begin_handshake","identity_client_handle_challenge_received","identity_server_handle_challenge_response_received","identity_server_handle_endpoint_request_received","identity_server_start","identity_server_stop","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","challenge_response","challenge_response_valid","channel_name","channel_name","client_allowed","client_allowed","client_auth_private_key","client_auth_public_key","client_auth_signature_valid","client_proof_signature_valid","client_proof_signature_valid","client_requested_channel_valid","client_requested_endpoint_valid","client_service_id","client_service_id","client_service_id","client_service_id","endpoint_challenge","endpoint_name","endpoint_name","endpoint_name","endpoint_private_key","endpoint_service_id","endpoint_service_id","endpoint_service_id","endpoint_service_id","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","handle","identity_service_id","line","progress","reason","reason","reason","reason","requested_channel","requested_endpoint","stream","stream","summary","tag","Error","HonkRPCFailure","IncorrectUsage","InvalidState","UnexpectedResponseReceived","borrow","borrow_mut","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","vzip","BadClient","Error","HonkRPCFailure","IncorrectUsage","InvalidState","borrow","borrow_mut","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","vzip","BadVersion","EndpointClientError","EndpointServerError","Error","Failure","GOSLING_CRATE_VERSION","GOSLING_PROTOCOL_VERSION","HandshakeHandleNotFound","HonkRpc","IdentityClientError","IdentityServerError","IncorrectUsage","InvalidArg","InvalidArgument","Io","RequestCookieRequired","RpcError","TorCrypto","TorNotConnected","TorProvider","borrow","borrow","borrow_mut","borrow_mut","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","into","into","source","to_string","try_from","try_from","try_from","try_from_primitive","try_into","try_into","type_id","type_id","vzip","vzip","ClientCreationFailed","EndpointChallengeResponseTooLarge","Error","HonkRPCFailure","IncorrectUsage","InvalidState","UnexpectedResponseReceived","borrow","borrow_mut","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","vzip","BadClient","EndpointChallengeTooLarge","Error","HonkRPCFailure","IncorrectUsage","InvalidState","borrow","borrow_mut","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"gosling"],[6,"gosling::context"],[63,"gosling::context::ContextEvent"],[118,"gosling::endpoint_client"],[136,"gosling::endpoint_server"],[154,"gosling::gosling"],[210,"gosling::identity_client"],[230,"gosling::identity_server"],[249,"core::result"],[250,"tor_interface::tor_crypto"],[251,"tor_interface::tor_crypto"],[252,"tor_interface::tor_crypto"],[253,"core::fmt"],[254,"tor_interface::tor_provider"],[255,"alloc::boxed"],[256,"core::time"],[257,"core::option"],[258,"core::any"],[259,"alloc::collections::vec_deque"],[260,"honk_rpc::honk_rpc"],[261,"core::error"],[262,"tor_interface::tor_crypto"],[263,"tor_interface::tor_provider"]],"d":["","","","","","","","","","","","","","","","","cbindgen:ignore","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","cbindgen:ignore","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,1,1,12,1,12,1,1,1,1,1,12,1,12,1,1,1,1,1,1,1,1,12,1,1,12,1,12,1,12,1,1,12,35,36,37,38,36,39,40,41,36,36,39,39,36,42,41,43,38,44,40,41,45,41,40,37,45,38,44,40,46,47,42,35,41,36,48,37,49,50,43,38,39,51,40,52,53,46,48,49,51,43,42,37,38,53,53,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,3,3,0,28,0,0,3,3,3,3,3,28,3,3,28,0,3,3,3,28,3,28,3,28,28,28,28,28,28,3,3,28,3,3,3,3,3,3,3,3,3,28,3,3,3,28,28,3,28,28,3,28,3,28,3,32,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,31,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],"f":"```````````````````````````````{b{{h{df}}}}{ce{}{}}000{{bj}{{h{df}}}}{{blnA`}{{h{jf}}}}{{bjAb}{{h{df}}}}{{bAdA`lAf}{{h{df}}}}{{bl}{{h{df}}}}{{AhAj}Al}{cc{}}06{{blA`}{{h{jf}}}}{{bjAn}{{h{df}}}}6{{bjAbAbAn}{{h{df}}}};;::{{{Bb{B`}}BdBdBfBh{Bj{Bf}}Ad}{{h{bf}}}}{c{{h{e}}}{}{}}000{cBl{}}0{b{{h{{Bn{Ah}}f}}}}>>````````````````````````````````````````````````````````````>>{{C`Aj}Al}08{CbC`}{ce{}{}}{C`{{Bj{Cd}}}}{cA`{}}7762`````22{{CfAj}Al}0={CbCf}4{Cf{{Bj{Cd}}}}3::95````````````````````5555{{ChCh}Ab}{{ce}Ab{}{}}000{{ChAj}Al}{{fAj}Al}0{cc{}}{Cjf}{C`f}{Cff}{Clf}{Cnf}5{D`f}{Dbf}{Cbf}{ce{}{}}0{f{{Bj{Cd}}}}{cA`{}}{c{{h{e}}}{}{}}{Bh{{h{Ch{Dd{Ch}}}}}}1{c{{h{Ch{Dd{Ch}}}}}{}}22{cBl{}}066```````66{{D`Aj}Al}0{CbD`}{cc{}}9{D`{{Bj{Cd}}}}8774:``````::{{CnAj}Al}0{CbCn}3<{Cn{{Bj{Cd}}}};::7=","c":[],"p":[[5,"Context",6],[1,"unit"],[6,"Error",154],[6,"Result",249],[8,"HandshakeHandle",6],[5,"V3OnionServiceId",250],[5,"X25519PrivateKey",250],[5,"String",251],[1,"bool"],[5,"Ed25519PrivateKey",250],[5,"X25519PublicKey",250],[6,"ContextEvent",6],[5,"Formatter",252],[8,"Result",252],[5,"Document",253],[10,"TorProvider",254],[5,"Box",255],[1,"u16"],[5,"Duration",256],[1,"i32"],[6,"Option",257],[5,"TypeId",258],[5,"VecDeque",259],[6,"Error",118],[6,"Error",260],[10,"Error",261],[6,"Error",136],[6,"RpcError",154],[6,"Error",250],[5,"Error",262],[6,"Error",230],[6,"Error",210],[6,"Error",254],[5,"TryFromPrimitiveError",263],[15,"IdentityServerChallengeResponseReceived",63],[15,"IdentityServerHandshakeRejected",63],[15,"EndpointClientHandshakeCompleted",63],[15,"EndpointServerHandshakeCompleted",63],[15,"EndpointServerHandshakeRejected",63],[15,"IdentityClientHandshakeCompleted",63],[15,"IdentityServerHandshakeCompleted",63],[15,"IdentityServerEndpointRequestReceived",63],[15,"EndpointServerChannelRequestReceived",63],[15,"IdentityClientChallengeReceived",63],[15,"EndpointServerPublished",63],[15,"IdentityClientHandshakeFailed",63],[15,"IdentityServerHandshakeStarted",63],[15,"IdentityServerHandshakeFailed",63],[15,"EndpointClientHandshakeFailed",63],[15,"EndpointServerHandshakeStarted",63],[15,"EndpointServerHandshakeFailed",63],[15,"TorLogReceived",63],[15,"TorBootstrapStatusReceived",63]],"b":[[125,"impl-Display-for-Error"],[126,"impl-Debug-for-Error"],[143,"impl-Display-for-Error"],[144,"impl-Debug-for-Error"],[184,"impl-Display-for-Error"],[185,"impl-Debug-for-Error"],[187,"impl-From%3CError%3E-for-Error"],[188,"impl-From%3CError%3E-for-Error"],[189,"impl-From%3CError%3E-for-Error"],[190,"impl-From%3CError%3E-for-Error"],[191,"impl-From%3CError%3E-for-Error"],[193,"impl-From%3CError%3E-for-Error"],[194,"impl-From%3CError%3E-for-Error"],[195,"impl-From%3CError%3E-for-Error"],[219,"impl-Debug-for-Error"],[220,"impl-Display-for-Error"],[238,"impl-Display-for-Error"],[239,"impl-Debug-for-Error"]]}],\
["honk_rpc",{"doc":"","t":"CKPPPPSSGPGPPPPPPPPPIPPPPGPPPPPPFPPPPPPNNNNNNNNNNNNNNNNMNNNNNNNNNHNNHHHNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNOOOOO","n":["honk_rpc","ApiSet","BsonDocumentParseFailed","BsonDocumentSizeTooLarge","BsonDocumentSizeTooSmall","BsonParseFailed","DEFAULT_MAX_MESSAGE_SIZE","DEFAULT_MAX_WAIT_TIME","Error","Error","ErrorCode","InvalidMaxMesageSize","MessageConversionFailed","MessageParseFailed","MessageReadTimedOut","MessageTooBig","MessageVersionIncompatible","MessageWriteFailed","Pending","ReaderReadFailed","RequestCookie","RequestCookieInvalid","RequestFunctionInvalid","RequestNamespaceInvalid","RequestVersionInvalid","Response","ResponseCookieInvalid","ResponseStateInvalid","Runtime","SectionIdUnknown","SectionParseFailed","SectionTooLarge","Session","Success","Success","Unknown","UnknownErrorSectionReceived","WriterFlushFailed","WriterWriteFailed","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client_call","client_drain_responses","client_next_response","eq","equivalent","equivalent","equivalent","equivalent","exec_function","fmt","fmt","fmt","fmt","from","from","from","from","from","get_error_section_size","get_max_message_size","get_max_wait_time","get_message_overhead","get_request_section_size","get_response_section_size","into","into","into","into","into_stream","namespace","new","next_result","set_max_message_size","set_max_wait_time","source","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","update","vzip","vzip","vzip","vzip","cookie","cookie","cookie","error_code","result"],"q":[[0,"honk_rpc"],[1,"honk_rpc::honk_rpc"],[102,"honk_rpc::honk_rpc::Response"],[107,"bson::document"],[108,"core::result"],[109,"std::io"],[110,"std::io"],[111,"alloc::collections::vec_deque::drain"],[112,"core::option"],[113,"bson::bson"],[114,"core::fmt"],[115,"core::fmt"],[116,"core::time"],[117,"core::error"],[118,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,6,6,6,14,0,0,0,11,0,6,6,14,6,14,14,6,11,6,0,14,14,14,14,0,14,14,14,14,14,6,0,11,14,14,6,6,6,11,1,14,6,11,1,14,6,1,1,1,14,14,14,14,14,16,14,14,6,6,11,1,14,14,6,0,1,1,0,0,0,11,1,14,6,1,16,1,16,1,1,6,14,6,11,1,14,6,11,1,14,6,11,1,14,6,16,1,11,1,14,6,28,29,30,30,29],"f":"```````````````````````````````````````{ce{}{}}0000000{{{b{c}}ddfh}{{n{jl}}}{A`AbAd}}{{{b{c}}}{{Ah{Af}}}{A`AbAd}}{{{b{c}}}{{Aj{Af}}}{A`AbAd}}{{AlAl}An}{{ce}An{}{}}000{{B`dfh{Aj{j}}}{{n{{Aj{Bb}}Al}}}}{{AlBd}Bf}0{{lBd}Bf}0{cc{}}00{fAl}1{{{Aj{j}}{Aj{Bh}}{Aj{Bb}}}{{n{Bjl}}}}{{{b{c}}}Bj{A`AbAd}}{{{b{c}}}Bl{A`AbAd}}{{}{{n{Bjl}}}}{{{Aj{j}}{Aj{Bh}}Bh{Aj{f}}{Aj{h}}}{{n{Bjl}}}}{{{Aj{Bb}}}{{n{Bjl}}}}{ce{}{}}000{{{b{c}}}c{A`AbAd}}{B`d}{c{{b{c}}}{A`AbAd}}{B`{{Aj{{Bn{j{Aj{Bb}}Al}}}}}}{{{b{c}}f}{{n{C`l}}}{A`AbAd}}{{{b{c}}Bl}C`{A`AbAd}}{l{{Aj{Cb}}}}{cBh{}}0{c{{n{e}}}{}{}}0000000{cCd{}}000{B`C`}{{{b{c}}{Aj{{Cf{B`}}}}}{{n{C`l}}}{A`AbAd}}<<<<`````","c":[],"p":[[5,"Session",1],[1,"str"],[1,"i32"],[5,"Document",107],[8,"RequestCookie",1],[6,"Error",1],[6,"Result",108],[10,"Read",109],[10,"Write",109],[10,"Send",110],[6,"Response",1],[5,"Drain",111],[6,"Option",112],[6,"ErrorCode",1],[1,"bool"],[10,"ApiSet",1],[6,"Bson",113],[5,"Formatter",114],[8,"Result",114],[5,"String",115],[1,"usize"],[5,"Duration",116],[1,"tuple"],[1,"unit"],[10,"Error",117],[5,"TypeId",118],[1,"slice"],[15,"Pending",102],[15,"Success",102],[15,"Error",102]],"b":[[56,"impl-Display-for-ErrorCode"],[57,"impl-Debug-for-ErrorCode"],[58,"impl-Display-for-Error"],[59,"impl-Debug-for-Error"]]}],\
["tor_interface",{"doc":"","t":"CCCCPPPGPPPFFPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGFFPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPSSSSSSSFFFGPPPGFSSFFSSSSSSPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPIPGPPPGFFKPPFGGKPMNMMNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNMNNNNNNMMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNOOOOO","n":["legacy_tor_client","mock_tor_client","tor_crypto","tor_provider","AddOnionFailed","CircuitTokenInvalid","DelOnionFailed","Error","GetInfoNetListenersSocksFailed","GetInfoVersionFailed","LegacyControlStreamCreationFailed","LegacyOnionListener","LegacyTorClient","LegacyTorControllerCreationFailed","LegacyTorProcessAuthenticationFailed","LegacyTorProcessCreationFailed","LegacyTorProcessTooOld","NoSocksListenersFound","OnionClientAuthAddFailed","OnionClientAuthRemoveFailed","SetConfDisableNetwork0Failed","SetEventsFailed","Socks5ConnectionFailed","TcpListenerBindFailed","TcpListenerLocalAddrFailed","WaitAsyncEventsFailed","accept","add_client_auth","bootstrap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","drop","fmt","fmt","from","from","from","generate_token","into","into","into","listener","new","release_token","remove_client_auth","set_nonblocking","source","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","version","vzip","vzip","vzip","ClientAlreadyBootstrapped","ClientNotBootstrapped","Error","MockOnionListener","MockTorClient","OnionServiceAuthInvalid","OnionServiceNotFound","OnionServiceNotPublished","OnionServiceRequiresOnionAuth","TcpListenerBindFailed","TcpListenerLocalAddrFailed","accept","add_client_auth","bootstrap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","default","drop","drop","fmt","fmt","from","from","from","generate_token","into","into","into","listener","new","release_token","remove_client_auth","set_nonblocking","source","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","vzip","vzip","vzip","ConversionError","ED25519_PRIVATE_KEYBLOB_BASE64_LENGTH","ED25519_PRIVATE_KEY_KEYBLOB_HEADER_LENGTH","ED25519_PRIVATE_KEY_KEYBLOB_LENGTH","ED25519_PRIVATE_KEY_KEYBLOB_SIZE","ED25519_PRIVATE_KEY_SIZE","ED25519_PUBLIC_KEY_SIZE","ED25519_SIGNATURE_SIZE","Ed25519PrivateKey","Ed25519PublicKey","Ed25519Signature","Error","KeyInvalid","One","ParseError","SignBit","V3OnionServiceId","V3_ONION_SERVICE_ID_STRING_LENGTH","V3_ONION_SERVICE_ID_STRING_SIZE","X25519PrivateKey","X25519PublicKey","X25519_PRIVATE_KEY_BASE64_LENGTH","X25519_PRIVATE_KEY_BASE64_SIZE","X25519_PRIVATE_KEY_SIZE","X25519_PUBLIC_KEY_BASE32_LENGTH","X25519_PUBLIC_KEY_BASE32_SIZE","X25519_PUBLIC_KEY_SIZE","Zero","as_bytes","as_bytes","as_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_base32","from_base64","from_key_blob","from_private_key","from_private_key","from_private_key","from_private_x25519","from_public_key","from_raw","from_raw","from_raw","from_raw","from_raw","from_service_id","from_string","generate","generate","hash","hash","into","into","into","into","into","into","into","into","is_valid","partial_cmp","sign_message","sign_message","sign_message_ex","to_base32","to_base32","to_base64","to_bytes","to_bytes","to_bytes","to_key_blob","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify_x25519","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BootstrapComplete","BootstrapStatus","CircuitToken","Domain","Error","Generic","Ip","LogReceived","OnionAddr","OnionAddrV3","OnionListener","OnionListenerImpl","OnionService","OnionServicePublished","OnionStream","TargetAddr","TorEvent","TorProvider","V3","accept","accept","add_client_auth","bootstrap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","connect","deref","deref_mut","eq","eq","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","generate_token","hash","hash","into","into","into","into","into","into","into","listener","local_addr","new","partial_cmp","partial_cmp","peer_addr","read","release_token","remove_client_auth","service_id","set_nonblocking","set_nonblocking","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write","line","progress","service_id","summary","tag"],"q":[[0,"tor_interface"],[4,"tor_interface::legacy_tor_client"],[67,"tor_interface::mock_tor_client"],[120,"tor_interface::tor_crypto"],[288,"tor_interface::tor_provider"],[416,"tor_interface::tor_provider::TorEvent"],[421,"core::option"],[422,"std::io::error"],[423,"core::result"],[424,"core::fmt"],[425,"core::fmt"],[426,"core::error"],[427,"alloc::string"],[428,"core::any"],[429,"alloc::vec"],[430,"core::cmp"],[431,"core::hash"],[432,"der::error"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","The number of bytes needed to store base64 encoded ed25519 …","The number of bytes needed to store the keyblob header","The number of bytes needed to store ed25519 private …","The number of bytes needed to store ed25519 private …","The number of bytes in an ed25519 secret key …","The number of bytes in an ed25519 public key …","The number of bytes in an ed25519 signature cbindgen:ignore","","","","","","","","","","The number of bytes needed to store onion service id as an …","The number of bytes needed to store onion service id as an …","","","The number of bytes needed to store base64 encoded x25519 …","The number of bytes needed to store base64 encoded x25519 …","The number of bytes in an x25519 private key …","The number of bytes needed to store base32 encoded x25519 …","The number of bytes needed to store bsae32 encoded x25519 …","The number of bytes in an x25519 publickey cbindgen:ignore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,13,13,13,0,13,13,13,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,1,6,6,1,6,13,1,6,13,6,1,13,13,1,6,13,6,1,6,13,6,6,6,6,1,13,13,1,6,13,1,6,13,1,6,13,6,6,1,6,13,29,29,0,0,0,29,29,29,29,29,29,27,28,28,27,28,29,27,28,29,28,28,27,28,29,29,27,28,29,28,27,28,29,28,28,28,28,27,29,29,27,28,29,27,28,29,27,28,29,28,27,28,29,36,0,0,0,0,0,0,0,0,0,0,0,36,34,36,0,0,0,0,0,0,0,0,0,0,0,0,34,30,17,7,16,36,30,33,8,17,7,34,16,36,30,33,8,17,7,34,16,30,33,8,17,7,34,16,30,33,8,17,7,34,7,16,30,33,8,17,7,16,36,36,30,33,8,17,7,7,16,36,30,33,8,17,7,34,34,17,8,16,30,17,7,16,7,16,30,33,8,17,30,7,16,8,17,7,16,36,30,33,8,17,7,34,7,7,16,8,16,30,17,8,16,33,8,16,16,30,33,8,17,7,34,36,7,16,36,30,33,8,17,7,34,16,36,30,33,8,17,7,34,16,36,30,33,8,17,7,34,33,33,16,36,30,33,8,17,7,34,25,25,0,44,0,10,44,25,0,0,0,0,44,25,0,0,0,0,43,40,19,41,41,2,19,42,43,44,25,10,2,19,42,43,44,25,10,42,43,44,42,43,44,42,43,41,2,2,42,43,2,42,42,43,43,44,25,10,10,2,19,42,43,44,25,10,10,10,41,42,43,2,19,42,43,44,25,10,41,2,42,42,43,2,2,41,41,42,40,19,42,43,44,42,43,10,2,2,19,42,43,44,25,10,2,19,42,43,44,25,10,2,19,42,43,44,25,10,41,2,19,42,43,44,25,10,2,2,47,48,49,48,48],"f":"``````````````````````````{b{{j{{f{d}}h}}}}{{lnA`}{{j{AbAd}}}}{l{{j{AbAd}}}}{ce{}{}}00000{{lnAf{f{Ah}}}{{j{dAd}}}}{bAb}{{AjAl}An}0{cc{}}00{lAh}555{{lB`Af{f{{Bd{Bb}}}}}{{j{BfAd}}}}{{BhBh}{{j{lAj}}}}{{lAh}Ab}{{ln}{{j{AbAd}}}}{{bBj}{{j{Abh}}}}{Aj{{f{Bl}}}}{cBn{}}{c{{j{e}}}{}{}}00000{cC`{}}00{l{{j{{Cd{Cb}}Ad}}}}`???```````````{Cf{{j{{f{d}}h}}}}{{ChnA`}{{j{AbAd}}}}{Ch{{j{AbAd}}}}{ce{}{}}00000{{ChnAf{f{Ah}}}{{j{dAd}}}}{{}Ch}{CfAb}{ChAb}{{CjAl}An}0{cc{}}00{ChAh}777{{ChB`Af{f{{Bd{Bb}}}}}{{j{BfAd}}}}6{{ChAh}Ab}{{Chn}{{j{AbAd}}}}{{CfBj}{{j{Abh}}}}{Cj{{f{Bl}}}}{cBn{}}{c{{j{e}}}{}{}}00000{cC`{}}00{Ch{{j{{Cd{Cb}}Ad}}}}{ce{}{}}00````````````````````````````{Cl{{D`{Cn}}}}{Bb{{D`{Cn}}}}{n{{D`{Cn}}}}3333333333333333{B`B`}{ClCl}{DbDb}{A`A`}{BbBb}{nn}{DdDd}{{ce}Ab{}{}}000000{{nn}Df}{{B`B`}Bj}{{ClCl}Bj}{{DbDb}Bj}{{A`A`}Bj}{{BbBb}Bj}{{nn}Bj}{{B`Al}An}{{DhAl}An}0{{ClAl}An}{{DbAl}An}{{A`Al}An}{{BbAl}An}{{nAl}An}0{cc{}}000000{BjDd}1{Dj{{j{BbDh}}}}{Dj{{j{A`Dh}}}}{Dj{{j{B`Dh}}}}{B`Cl}{A`Bb}{B`n}{A`{{j{{Dl{B`Dd}}Dh}}}}{Cln}{{{D`{Cn}}}{{j{B`Dh}}}}{{{D`{Cn}}}{{j{ClDh}}}}{{{D`{Cn}}}{{j{DbDh}}}}{{{D`{Cn}}}{{j{A`Dh}}}}{{{D`{Cn}}}Bb}{n{{j{ClDh}}}}{Dj{{j{nDh}}}}{{}B`}{{}A`}{{Bbc}AbDn}{{nc}AbDn}{ce{}{}}0000000{DjBj}{{nn}{{f{Df}}}}{{B`{Bd{Cn}}}Db}{{A`{Bd{Cn}}}{{j{{Dl{DbDd}}Dh}}}}{{B`Cl{Bd{Cn}}}Db}{ClBn}{BbBn}{A`Bn}{B`{{D`{Cn}}}}{Db{{D`{Cn}}}}{A`{{D`{Cn}}}}{B`Bn}<<<<<<<{cBn{}}0{c{{j{e}}}{}{}}000000000000000{cC`{}}0000000{{Db{Bd{Cn}}Cl}Bj}{{Db{Bd{Cn}}BbDd}Bj}{ce{}{}}0000000```````````````````{E`{{j{{f{d}}h}}}}{Bf{{j{{f{d}}h}}}}{{EbnA`}{{j{AbAd}}}}{Eb{{j{AbAd}}}}44444444444444{EdEd}{EfEf}{EhEh}{{ce}Ab{}{}}00{{EdEd}Df}{{EfEf}Df}{{EbnAf{f{Ah}}}{{j{dAd}}}}{dc{}}0{{EdEd}Bj}{{EfEf}Bj}{d{{j{Abh}}}}{{EdAl}An}0{{EfAl}An}0{{EhAl}An}{{CbAl}An}{{AdAl}An}0{cc{}}000000{CjAd}{AjAd}{EbAh}{{Edc}AbDn}{{Efc}AbDn}{ce{}{}}000000{{EbB`Af{f{{Bd{Bb}}}}}{{j{BfAd}}}}{d{{f{Ef}}}}{{nAf}Ed}{{EdEd}{{f{Df}}}}{{EfEf}{{f{Df}}}}{d{{f{Eh}}}}{{d{Bd{Cn}}}{{j{Ejh}}}}{{EbAh}Ab}{{Ebn}{{j{AbAd}}}}{Edn}{{E`Bj}{{j{Abh}}}}{{BfBj}{{j{Abh}}}}<<<{cBn{}}00{d{{j{dh}}}}{c{{j{e}}}{}{}}0000000000000{cC`{}}000000{Eb{{j{{Cd{Cb}}Ad}}}}{ce{}{}}000000{{c{Bd{Cn}}}{{j{AbEl}}}{}}<`````","c":[],"p":[[5,"LegacyOnionListener",4],[5,"OnionStream",288],[6,"Option",421],[5,"Error",422],[6,"Result",423],[5,"LegacyTorClient",4],[5,"V3OnionServiceId",120],[5,"X25519PrivateKey",120],[1,"unit"],[6,"Error",288],[1,"u16"],[8,"CircuitToken",288],[6,"Error",4],[5,"Formatter",424],[8,"Result",424],[5,"Ed25519PrivateKey",120],[5,"X25519PublicKey",120],[1,"slice"],[5,"OnionListener",288],[5,"Path",425],[1,"bool"],[10,"Error",426],[5,"String",427],[5,"TypeId",428],[6,"TorEvent",288],[5,"Vec",429],[5,"MockOnionListener",67],[5,"MockTorClient",67],[6,"Error",67],[5,"Ed25519PublicKey",120],[1,"u8"],[1,"array"],[5,"Ed25519Signature",120],[6,"SignBit",120],[6,"Ordering",430],[6,"Error",120],[1,"str"],[1,"tuple"],[10,"Hasher",431],[10,"OnionListenerImpl",288],[10,"TorProvider",288],[5,"OnionAddrV3",288],[6,"OnionAddr",288],[6,"TargetAddr",288],[1,"usize"],[5,"Error",432],[15,"LogReceived",416],[15,"BootstrapStatus",416],[15,"OnionServicePublished",416]],"b":[[37,"impl-Display-for-Error"],[38,"impl-Debug-for-Error"],[91,"impl-Display-for-Error"],[92,"impl-Debug-for-Error"],[189,"impl-Debug-for-Error"],[190,"impl-Display-for-Error"],[195,"impl-Display-for-V3OnionServiceId"],[196,"impl-Debug-for-V3OnionServiceId"],[339,"impl-Debug-for-OnionAddrV3"],[340,"impl-Display-for-OnionAddrV3"],[341,"impl-Debug-for-OnionAddr"],[342,"impl-Display-for-OnionAddr"],[345,"impl-Debug-for-Error"],[346,"impl-Display-for-Error"],[354,"impl-From%3CError%3E-for-Error"],[355,"impl-From%3CError%3E-for-Error"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
